using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;

namespace Utilities.Logging
{
    /// <summary>
    /// Class autogenerated by ned's SQL to C# utility....
    /// </summary>
    public static class LoggerDatabaseDatabase
    {
        public const string CONNECTION = @"Server=NEDSPC\SQL2017;Initial Catalog=Logger;Integrated Security=true;";
        public static async Task Execute_spLogAsync(string pstring, TaskCallback<SqlDataReader> callback)
        {
            using (SqlConnection conn = new SqlConnection(CONNECTION))
            {
                await conn.OpenAsync();
                using (SqlCommand command = new SqlCommand()
                {
                    CommandText = "spLog",
                    CommandType = CommandType.StoredProcedure,
                    Connection = conn
                })
                {
                    command.Parameters.AddRange(
                        new SqlParameter[] {
                                new SqlParameter()
                                {
                                    ParameterName = "@string",
                                    SqlDbType = SqlDbType.NVarChar,
                                    SqlValue = pstring,
                                    Size = 8000,
                                    Precision = 0,
                                    Scale = 0,
                                    IsNullable = true
                                }
                        }
                    );
                    using (SqlDataReader reader = await command.ExecuteReaderAsync())
                    {
                        await callback(reader);
                    }
                }
            }
        }
        public static async Task Execute_spGenerateAllMethodsAsync(string pConnectionString, string pNamespace, string pClassName, TaskCallback<SqlDataReader> callback)
        {
            using (SqlConnection conn = new SqlConnection(CONNECTION))
            {
                await conn.OpenAsync();
                using (SqlCommand command = new SqlCommand()
                {
                    CommandText = "spGenerateAllMethods",
                    CommandType = CommandType.StoredProcedure,
                    Connection = conn
                })
                {
                    command.Parameters.AddRange(
                        new SqlParameter[] {
                                new SqlParameter()
                                {
                                    ParameterName = "@ConnectionString",
                                    SqlDbType = SqlDbType.NVarChar,
                                    SqlValue = pConnectionString,
                                    Size = 8000,
                                    Precision = 0,
                                    Scale = 0,
                                    IsNullable = true
                                },
                                new SqlParameter()
                                {
                                    ParameterName = "@Namespace",
                                    SqlDbType = SqlDbType.NVarChar,
                                    SqlValue = pNamespace,
                                    Size = 8000,
                                    Precision = 0,
                                    Scale = 0,
                                    IsNullable = true
                                },
                                new SqlParameter()
                                {
                                    ParameterName = "@ClassName",
                                    SqlDbType = SqlDbType.NVarChar,
                                    SqlValue = pClassName,
                                    Size = 8000,
                                    Precision = 0,
                                    Scale = 0,
                                    IsNullable = true
                                }
                        }
                    );
                    using (SqlDataReader reader = await command.ExecuteReaderAsync())
                    {
                        await callback(reader);
                    }
                }
            }
        }
    }
}