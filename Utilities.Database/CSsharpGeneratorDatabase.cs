using System;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Data.SqlTypes;
using System.Configuration;

namespace Utilities.Database
{

    /// <summary>
    /// Class autogenerated by ned's SQL to C# utility....
    /// </summary>
    public static class CSsharpGeneratorDatabase
    {
        public static readonly string CONNECTION_ = ConfigurationManager.ConnectionStrings["C#GeneratorDatabase"].ToString();

        public static async Task Execute_spC_ViewHelper_dboAsync(string @DBName, Func<SqlDataReader, Task> callback)
        {
            using (SqlConnection @connection_ = new SqlConnection(CONNECTION_))
            {
                await @connection_.OpenAsync().ConfigureAwait(false);
                using (SqlCommand @command_ = new SqlCommand()
                {
                    CommandText = "spC#ViewHelper",
                    CommandType = CommandType.StoredProcedure,
                    Connection = @connection_
                })
                {
                    @command_.Parameters.AddRange(
                        new SqlParameter[] {
                            new SqlParameter()
                            {
                                ParameterName = "@DBName",
                                SqlDbType = SqlDbType.NVarChar,
                                SqlValue = @DBName,
                                Size = -1,
                                Precision = 0,
                                Scale = 0,
                                IsNullable = true
                            }
                        }
                    );
                    using (SqlDataReader @reader_ = await @command_.ExecuteReaderAsync().ConfigureAwait(false))
                    {
                        await callback(@reader_).ConfigureAwait(false);
                    }
                }
            }
        }
        public static async Task Execute_spC_GenerateAllMethods_dboAsync(string @DBName, string @ConnectionString, string @Namespace, string @ClassName, string @AppendText, Func<SqlDataReader, Task> callback)
        {
            using (SqlConnection @connection_ = new SqlConnection(CONNECTION_))
            {
                await @connection_.OpenAsync().ConfigureAwait(false);
                using (SqlCommand @command_ = new SqlCommand()
                {
                    CommandText = "spC#GenerateAllMethods",
                    CommandType = CommandType.StoredProcedure,
                    Connection = @connection_
                })
                {
                    @command_.Parameters.AddRange(
                        new SqlParameter[] {
                            new SqlParameter()
                            {
                                ParameterName = "@DBName",
                                SqlDbType = SqlDbType.NVarChar,
                                SqlValue = @DBName,
                                Size = -1,
                                Precision = 0,
                                Scale = 0,
                                IsNullable = true
                            },
                            new SqlParameter()
                            {
                                ParameterName = "@ConnectionString",
                                SqlDbType = SqlDbType.NVarChar,
                                SqlValue = @ConnectionString,
                                Size = -1,
                                Precision = 0,
                                Scale = 0,
                                IsNullable = true
                            },
                            new SqlParameter()
                            {
                                ParameterName = "@Namespace",
                                SqlDbType = SqlDbType.NVarChar,
                                SqlValue = @Namespace,
                                Size = -1,
                                Precision = 0,
                                Scale = 0,
                                IsNullable = true
                            },
                            new SqlParameter()
                            {
                                ParameterName = "@ClassName",
                                SqlDbType = SqlDbType.NVarChar,
                                SqlValue = @ClassName,
                                Size = -1,
                                Precision = 0,
                                Scale = 0,
                                IsNullable = true
                            },
                            new SqlParameter()
                            {
                                ParameterName = "@AppendText",
                                SqlDbType = SqlDbType.NVarChar,
                                SqlValue = @AppendText,
                                Size = 64,
                                Precision = 0,
                                Scale = 0,
                                IsNullable = true
                            }
                        }
                    );
                    using (SqlDataReader @reader_ = await @command_.ExecuteReaderAsync().ConfigureAwait(false))
                    {
                        await callback(@reader_).ConfigureAwait(false);
                    }
                }
            }
        }
    }
}